---
Description: A mail server setup
Resources:
  MailServer:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
          - configure_aws
          - unattended_upgrades
          - ipv6
          - hostname
          - shell
          - dns
          - postfix
          - spamassassin

        configure_aws:
          files:
            /home/ubuntu/.aws/config:
              content: !Sub |
                [default]
                region=${AWS::Region}
            /root/.aws/config:
              content: !Sub |
                [default]
                region=${AWS::Region}
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.MailServer.Metadata.AWS::CloudFormation::Init
                action=/usr/local/bin/cfn-init -v --configsets default --resource MailServer --stack ${AWS::StackName} --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf


        unattended_upgrades:
          packages:
            apt:
              unattended-upgrades: []
          commands:
            allow_reboot:
              command: echo -n "Unattended-Upgrade::Automatic-Reboot \"true\";" >> /etc/apt/apt.conf.d/50unattended-upgrades

        ipv6:
          files:
            /etc/network/interfaces.d/60-default-with-ipv6.cfg:
              content: iface eth0 inet6 dhcp


        hostname:
          files:
            /etc/hostname:
              content: mx1.dyksen.net
          commands:
            hostname:
              command: hostname mx1.dyksen.net


        shell:
          packages:
            apt:
              zsh: []
              htop: []
              mosh: []
          commands:
            01_zprezto:
              command: sudo -u ubuntu git clone --recursive git://github.com/ejdyksen/prezto.git /home/ubuntu/.zprezto
              test: "! [ -d /home/ubuntu/.zprezto ]"
            02_dotfiles:
              command: sudo -u ubuntu git clone git://github.com/ejdyksen/dotfiles.git /home/ubuntu/.dotfiles
              test: "! [ -d /home/ubuntu/.dotfiles ]"
            03_dotfiles_install:
              command: sudo -u ubuntu bash /home/ubuntu/.dotfiles/install.sh
              test: "! [ -f /home/ubuntu/.zshrc ]"
            04_chsh:
              command: chsh -s /usr/bin/zsh ubuntu


        dns:
          packages:
            apt:
              bind9: []
              bind9utils: []
          services:
            sysvinit:
              bind9:
                enabled: true
                ensureRunning: true


        postfix:
          packages:
            apt:
              postfix: []
              telnet: []
          files:
            /etc/postfix/header_checks:
              content: |
                /^X-Spam-Level: \*{6,}/ DISCARD
          commands:
            01_postfix_main:
              command: postconf -e "myhostname = mx1.dyksen.net" "myorigin = \$mydomain" "mydestination = \$myhostname, mx1.dyksen.net" "header_checks = regexp:/etc/postfix/header_checks" "message_size_limit = 157286400" "smtp_tls_security_level = may"
            02_postfix_networks:
              command: postconf -e "mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128 73.145.150.118/32 [2601:405:4a80:49f0::0]/60"
            03_postfix_domains:
              command: postconf -e "relay_domains = dyksen.net, downstairslabs.com" "relay_transport = smtp:mail.dyksen.net:26"
            04_postfix_port_26:
              command: postconf -M 26/inet="26       inet  n       -       y       -       -       smtpd"
            05_reload:
              command: postfix reload
          services:
            sysvinit:
              postfix:
                enabled: true
                ensureRunning: true


        spamassassin:
          packages:
            apt:
              spamassassin: []
              jq: []
              pyzor: []
              razor: []
          files:
            /usr/local/bin/spamfilter.sh:
              mode: '000755'
              content: |
                #!/usr/bin/env bash

                SENDMAIL=/usr/sbin/sendmail
                SPAMASSASSIN=/usr/bin/spamc

                logger <<<"Spam filter piping to SpamAssassin, then to: $SENDMAIL $@"
                ${SPAMASSASSIN} | ${SENDMAIL} "$@"

                exit $?
            /etc/spamassassin/local.cf:
              mode: '000644'
              content: |
                # This is the right place to customize your installation of SpamAssassin.
                #
                # See 'perldoc Mail::SpamAssassin::Conf' for details of what can be
                # tweaked.
                #
                # Only a small subset of options are listed below
                #
                ###########################################################################

                use_bayes 1
                required_score 2.3

                report_safe 0

                bayes_auto_learn 1

                bayes_auto_learn_threshold_spam         8.0
                bayes_auto_learn_threshold_nonspam      -1.0

                bayes_path /var/spamassassin/bayes_db/bayes
                bayes_file_mode 0777

                dns_server 127.0.0.1
            /etc/cron.hourly/backup-spamassassin:
              mode: '000755'
              content: |
                #!/usr/bin/env bash
                cd /tmp
                now=`date -u +%FT%T`Z
                filename=sa-learn-backup-$now
                sa-learn --backup > $filename.txt
                backup_size=`du -k "$filename.txt" | cut -f1`
                if [ $backup_size -gt 2000 ]
                then
                  tar --force-local -cJf $filename.tar.xz $filename.txt
                  aws s3 cp $filename.tar.xz s3://ejdyksen-spam/sa-backup/$filename.tar.xz --storage-class STANDARD_IA
                fi
                rm -f $filename
            /usr/local/bin/restore-spamassassin:
              mode: '000755'
              content: |
                #!/usr/bin/env bash
                object=s3://ejdyksen-spam/`aws s3api list-objects-v2 --bucket ejdyksen-spam --prefix 'sa-backup/' | jq -r '.Contents | max_by(.Key) | .Key'`
                aws s3 cp $object .
                archive=`ls sa-learn-backup*.tar.xz 2>/dev/null | sort -V | tail -n 1`
                tar --force-local -xf $archive 2>/dev/null || true
                txtfile=`ls sa-learn-backup*.txt 2>/dev/null | sort -V | tail -n 1`
                sudo -u debian-spamd sa-learn --restore $txtfile
                rm -f $txtfile $archive
          commands:
            01_create_bayes_db:
              command: mkdir /var/spamassassin && chown debian-spamd /var/spamassassin && chgrp debian-spamd /var/spamassassin && chmod 777 /var/spamassassin
              test: "! [ -d /var/spamassassin ]"
            02_restore_from_backup:
              command: /usr/local/bin/restore-spamassassin
              test: "! [ -d /var/spamassassin/bayes_db ]"
              cwd: /tmp
            03_setup_content_filter:
              command: postconf -P "smtp/inet/content_filter=spamf"
              test: "! [ -f /var/spamassassin/flag ]"
            04_setup_spamfilter_transport:
              command: echo -n "spamf     unix  -       n       n       -       -       pipe\n  user=debian-spamd argv=/usr/bin/spamc -f -e /usr/sbin/sendmail -oi -f \${sender} \${recipient}" >> /etc/postfix/master.cf
              test: "! [ -f /var/spamassassin/flag ]"
            05_enable_spamassassin:
              command: sed -i 's/ENABLED=0/ENABLED=1/g' /etc/default/spamassassin
              test: "! [ -f /var/spamassassin/flag ]"
            06_enable_spamassassin_cron:
              command: sed -i 's/CRON=0/CRON=1/g' /etc/default/spamassassin
              test: "! [ -f /var/spamassassin/flag ]"
            07_reload_postfix:
              command: postfix reload
              test: "! [ -f /var/spamassassin/flag ]"
            08_touch_flag:
              command: touch /var/spamassassin/flag
          services:
            sysvinit:
              spamassassin:
                enabled: true
                ensureRunning: true


    Properties:
      ImageId: ami-0f65671a86f061fcd
      InstanceType: t2.nano
      AvailabilityZone: us-east-2a
      SecurityGroups:
      - !Ref MailSecurityGroup
      IamInstanceProfile: !Ref MailServerInstanceProfile
      Ipv6Addresses:
      - Ipv6Address: 2600:1f16:6e1:6500::12:1
      KeyName: ejd
      Tags:
        -
          Key: Name
          Value: mx1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          apt-get update
          apt-get -y install python-pip
          pip install --upgrade pip
          sudo pip install awscli
          sudo pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          cp /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
          chmod +x /etc/init.d/cfn-hup
          update-rc.d cfn-hup defaults
          service cfn-hup start

          /usr/local/bin/cfn-init -v --configsets default --resource MailServer --stack ${AWS::StackName} --region ${AWS::Region}

          /usr/local/bin/cfn-signal --exit-code $? --resource MailServer --stack ${AWS::StackName} --resource MailServer --region ${AWS::Region}

          reboot

    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M

  VpcIPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref MailServer
      AllocationId: 'eipalloc-c5d11cac'

  MailServerInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: '/'
      Roles:
        - !Ref MailServerRole

  MailServerRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: '/'
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "s3:*"
                Resource:
                  - "arn:aws:s3:::ejdyksen-spam"
                  - "arn:aws:s3:::ejdyksen-spam/*"

  SystemRecoveryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger a recovery when system status check fails for 2 consecutive minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Maximum
      Period: '60'
      EvaluationPeriods: '2'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '0'
      AlarmActions:
        - !Sub "arn:aws:automate:${AWS::Region}:ec2:recover"
        - !Sub "arn:aws:sns:us-east-2:${AWS::AccountId}:mx1-alarm"
      Dimensions:
      - Name: InstanceId
        Value: !Ref MailServer

  InstanceRecoveryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger a reboot when instance status check fails for 2 consecutive minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_Instance
      Statistic: Maximum
      Period: '60'
      EvaluationPeriods: '2'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '0'
      AlarmActions:
        - !Sub "arn:aws:swf:us-east-2:${AWS::AccountId}:action/actions/AWS_EC2.InstanceId.Reboot/1.0"
        - !Sub "arn:aws:sns:us-east-2:${AWS::AccountId}:mx1-alarm"
      Dimensions:
      - Name: InstanceId
        Value: !Ref MailServer

  MailSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and SMTP
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 73.145.150.118/32
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 35.8.0.0/13
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 35.20.0.0/14
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIpv6: 2601:405:4a80:49f0::/60
      - IpProtocol: udp
        FromPort: 60000
        ToPort: 61000
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 60000
        ToPort: 61000
        CidrIpv6: ::/0
      - IpProtocol: tcp
        FromPort: '25'
        ToPort: '25'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '25'
        ToPort: '25'
        CidrIpv6: ::/0
      - IpProtocol: tcp
        FromPort: '26'
        ToPort: '26'
        CidrIp: 73.145.150.118/32
      - IpProtocol: tcp
        FromPort: '26'
        ToPort: '26'
        CidrIpv6: 2601:405:4a80:49f0::/60
